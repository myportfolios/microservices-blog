                                                 **** Docker ***********
 * Docker is a platform or ecosystem around creating and running containers.
    * The Docker ecosystem includes:
      ** Docker Client
      ** Docker Server
      ** Docker machines
      ** Docker Images
      ** Docker Hub
      ** Docker Compose

 * Docker is an isolated computing environment that provides all the necessary dependencies to run any app or program .
 * We create a Docker container for each of our service/app.
 * Wwhen we run the Docker command to install an application, the Docker cli reaches out to the Docker hub 
      which generates a single fine called "Image".
 * This single file consists of all the dependencies and config required to run a 
    specific program.
 * The Container is an instance of an Image which runs a program

                                               ******* Doker Commands ***

 1. Docker ps - it list all the running containers on our VM
              - we also use it to get the ID of a running container for further use 
 2. Docker ps --all - It's used to list out all stopped containers
 3. Docker run   - This command is  combination of the 'Docker create' and 'Docker Start' Commands
 4. Docker create - This command preps the file system of the Image for use within the container. Running it generates
                    a CONTAINER_ID
 5. Docker start - This command runs the 'run command' of the Image. Running the command with 
        the 'a' flag enables it to watch out for output from the container which is then
        displayed in our terminal. e.g 'docker start -a CONTAINER_ID'
6. docker start -a CONTAINER_ID : This command also restarts a stopped container
7. docker system prune - will delete all stopped and unused containers.(Note: This also deletes the 'build cache')
 *** The build cache' is any image fetched from docker hub *******
8. docker logs CONTAINER_ID - This command logs all the emitted info from a container
9. 'docker stop CONTAINER_ID' or 'docker kill CONTAINER_ID' stops a running container.

                            ****** 'docker stop CONTAINER_ID' VS docker kill CONTAINER_ID ********

    * The 'docker stop CONTAINER_ID' issues a SIGTERM (Termination Signal) to the container, giving it  some time (abt 10 sec)to do some 
      other activities, like clean up, saving, etc, and then stop the container when it's done / shut itself down.
    * The 'docker kill CONTAINER_ID' issues a 'SIGKILL' (Kill Signal) command which tells the container to stop right away!  

                                ******* Executing Commands in Running containers ***********************
* 'docker exec -it CONTAINER_ID <command to execute>'
* the '-it' flag allows us to provide input to the container
* the 'exec' flag is used to run another command
*  The '-it' flag enables input from user terminal to the STDIN of the running process, and output from the STDOUT of the
   running process to the user terminal. (hence, communication from terminal to running process and vise versa)

                                ***** The  Purpose of the 'it' flag *********
 ** NOTE - Every process we create in a linux environment has 3 communication channels attached to it, they are  STDIN, STDOUT, STDERR                               
 * The 'it' flag is actually 2 seprate flags, ie, -i & -t
 * The '-i' flag implies that everything that's typed from the terminal gets attached to redis (for example) STDIN (Standard In) 
 * The  '-t' flags makes sure that both the inputs from my terminal and the emitted output from the process STDOUT (standard Out)
   gets displayed neatly in my screen         

                                        ***** The  Purpose of the 'exec' command *********                      
* Running 'exec' with the 'sh' command enables a full functional Linux terminal within the container.
  ** 'docker exec -it <CONTAINER_ID> sh'
* This enables us to run all Linux commands like cd, ls, export, echo, etc, within the Container.
* NOTE - 'Cntrl + C or Ctrl + D can be used to exit a container when running in the shell/ Command Processor (sh) mode

                                                 ***** Starting with a shell *********
* 'docker run -it <Image> sh'  
* busybox example:  'docker run -it busybox sh'   

                                                ***** Container Isolation *********
* 2 containers DON'T automatically share their file system               

                                            ***** Creating custom Docker Image *********
Docker file -------------> Docker Client ------------> Docker Server -------------> Usable Image
(Docker File contains configurations
to define how ourcontainer
should behave)                  


                                     ***** Creating a docker file *********
1. Specify a base image
2. Run some commands to install additional programs
3. Specify a command to run on container startup


                                     ***** Tagging a docker image *********
* this is when we want to give a unique generalized name to our custom Image making it easier to run                                     
  with the 'docker run ------' command
  ** -t -----> your docker ID ------> slash (/) ------> Repo/Project Name ------> Column (:) ----->Version ---> dot (.)
        *** eg, '-t 23101/redis:latest .'
        *where the dot (.) is the build context - it specifies the directory of files/folders to use for the build
                                                  ***** Kubernetes *********

 * Kubernetes is a tool for runninng a bunch of different containers.
 * We give it some configuration to describe how we want our containers (apps) to run and interact
   with each other.
 * We use Kubernetes in microservices architecture to make communication very easy
   and straightforward.
 * With kubernates, we create containers using an Image of our service, along with some instructions in a configuration file.
 * Kubernates would first check our local machine for the Image by default, then resort to the docker hub if the image isn't present on our machine.

   Kubernetes cluster consist of 1 to many virtual machines, each VM or Node is meant to run
   one of our apps/services (that is embeded in a container)
* We interact with kubernates from the cli using the command 'kubectl'.
* In addition to creation of pods for our container(s),  kubernates also creates a Deployment which ensures that we have the required numbers of containers at all times.
* If one container crashes, the Deployment would restart it.

                                           ***** Pod *********
* A pod wraps up a container and can contain one or more containers. Technically, it's different from a container

                                        ***** Kubernetes Service *********

* It abstracts all the difficulties involved in handling networking among different microservice.
* It takes in a request and forwards it to the appropraite container or microservice
it gives us access to running pods/containers inside our kubernetes cluster
* it provides networking between pods.

                                        ***** Types of Service *********
* Cluster IP: Sets up an easy-to-remember URL to access a pod. It only exposes pods within/in the cluster 

* Node Port: Makes a pod accessible from outside the cluster. Usually only used for dev purposes.

* Load Balancer: Makes a pod accessible from outside the cluster. This is the right way to expose a pod to the outside world.

* External Name: Redirects an in-cluster request to z CNAME url.....I need not worry about this one.

                                            ***** Kubernetes Config File *********
* It consist of instructions on the number of containers to be created from an Image
* It also includes instructions that states that the these containers should be accessible from network                                        

                                            ***** Infra folder *********
* The infra folder is short for 'infrastructure'. It will contain a kubernetes folder which houses all our configuration (YAML) files.    

                                ****** Docker VS Kubernetes *************
* Docker is used to run a container while kubernetes is used to runa  cluster of containers.                               


NOTE!!
* Services, Pods, Deployment are all refered to aas 'Objects' in Kubernetes. Creating these objects require creating a config file that will be fed to our cluster

*** .dockerignore file ****
* We use the .dockerignore file to exempt files and folders we do not want to copy during the build phase of our image.
* folders like node_modules should be ignored when copying files and dependencies to the WORKINGDIR of our container, thus, added to .dockerignore file.

************** Steps to update a Deployment when there are changes in source code ************

1.Ensure that the image is specified as the latest in the yaml config file.
  This is achieved by leaving the image without a version appended or with 'latest' tag appended in the pod spec section. See both options below:
  Option 1: image: <image-tag> (for example - docker-username/image-name)
  Option 2: image: <image-tag>:latest

2. Make changes to source code. if changes already exist, re-build image
   run 'docker build -t <image-tag> ."

3. Push the new image to Docker Hub registry by running:
   'docker push <image-tag>'
4. After image is successfully pushed to Docker hub, run the command below to update the deployment with the latest image:
   "kubectl rollout restart deployment <deployment-name>"
   Note - you can run "kubectl get deployments" and copy the name of the deployment.
5. You can run "kubectl get deployments" to view deployments that are running, "kubectl get pods" 
   to list the running pods created from the deployment (copy the pod name if needed), and "k logs <pod-name>" to view the logs emitted 
   from the pod when the pod/container started.

******************* Colacating multiple configuration objects in a single file ****************
* Rather than having seprate files for deployment and service creation of a related pod,
  we can have both objects (Deployment and Service) for a particular pod in a single file.
* This is done by adding "---", i.e, 3 dashes at the end of a configuration/ before the start of another.

********** Connecting to a pod through its Service type *********
* With the use of kubernetes, pods within a cluster communicate via their service type (Cluster IP - which is for communication btw pods in a cluster).
* In this case, communication between/among pods is through their service names whcih can be gotten by running:
  "kubectl get services".
* This name is then used to make a http request. For example,
    - podA runs containerA, and the Service name is service-A 
    - podB runs containerB, and the Service name is service-Balancer
  if podA needs to communicate with podB the request from podA will be - http://service-A:PORT
  if podB needs to communicate with podA the request from podB will be - http://service-B:PORT
Note - containerA and containerB are microservices. PORT represents the port where both containers are running.


******* Wiring up React App to the services using Load Balancer (Ingress) *********
* A Dockerfile will be created for  'React Dev Server', and a Deployment is used to create a pod (similar to what was done for the other services)
* The pod will be in the same cluster along with other pods.
* The 'React Dev Server' is only used to serve the initial HTML, CSS and JavaScript file as requested from the client/browser when the website/app is visited.
* Afterwards, there is no relevance for the 'React Dev Server'. Note, however, that the initial request from client is made with React running in the browser.
* A load balancer will be used to route/trasmit traffic/request from client to the appropraite backend service and vice versa.

********** Load Balancer Service *************
* A load balancer service is a configuration file with a set of instructions one of which is to instruct
  a Cloud Service Provider (AWS, Google) to provision a Load balancer for a pod.
* It's different from other kubernetes Objects that are created within a cluster, it's fed to the cluster.
* The service provider uses the instruction to create a Load Balancer which will handle traffic from the outside world to a pod. 

********** Ingress or Ingress Controller *************
* Unlike the Load Balancer Service that reaches out to Kubernetes with a config file that is used for creating a Load Balancer, 
  Ingress/Ingress controller is a pod (like other pods - post, query, comments, etc) with a set of routing rules to distribute 
  traffic to other services.
* The Ingress/Ingress Controller works along side a Load Balancer (Note - not a Load Balancer Service) that is provisioned by a Cloud Provider.

****** Load Balancer vs Ingress/Ingress Controller *************
* The load balancer is just about getting traffic into our cluster.
* This ingress thing is about routing rules or having some routing configuration that's going to send requests off to the appropriate pod.

****** Ingress-NGINX *********************
* This is a project or a open source library that's going to create a Load Balancer service inside of our cluster, plus an ingress automatically.
* The cmd "kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml"
  will install the Load Balancer and Ingress Controller into our cluster, we can then create routing configurations for Ingress controller to direct routing to appropriate pods.
* Ingress Controller will detect the router rules in a config we pass into the cluster, then will create an internal 
  matching routing rules which will be used to direct routes to appropriate pods.

********** Ingress Controller 'hosts' Rule ************
* In the yaml configuration file, under 'Rules' we have 'hosts' with a value of 'posts.com'.
* This is required to trick ingress that the request is coming from that website/domain so it can apply all the stated rules to it.
* However, this requires that we edit out system 'hosts' fle located at /etc/hosts for Mac users. we will point the website name 'posts.com' to our localhost.
* Thus, the request all request from ingress controller to 'posts.com' will be routed to our localhost instead of any such domain in the outside world.

************ Ingress Route Identification *********
* In ingress config file, Ingress only uses the path (for example /posts, /query) to determine/identify which pod to route request to.
** Hence, the method (POST,GET) doesn't play any role in this identification process. The method 'POST' in 'POST/post' as an example
   doesn't serve any purpose and must be removed. Removing the method leads to issues where multiple paths exist with the same name.
    POST/commnents ------- >removing the method -----------> comments
    GET/comments ------- > removing the method -----------> comments
  We now have 2 paths with the same name which will definitely confuse Ingress controller. In such a case we need to make the paths unique by changing one or the other.
Pls NOTE - There are tools that will effectively handle this porocess in a production env.

